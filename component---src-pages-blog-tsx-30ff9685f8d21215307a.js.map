{"version":3,"sources":["webpack:///./src/pages/blog.tsx","webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./src/components/BlogPost.tsx","webpack:///./node_modules/core-js/modules/es6.reflect.construct.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js"],"names":["query","BlogPage","data","console","log","last","postCount","allMdx","totalCount","months","postsReact","edges","map","edge","node","post","date","frontmatter","id","Utils","makeStrKey","push","key","isExcerpt","className","title","month","href","MDXRenderer","require","module","BlogPost","props","render","this","to","getBlogLink","path","body","React","Component","$export","create","aFunction","anObject","isObject","fails","bind","rConstruct","Reflect","construct","NEW_TARGET_BUG","F","ARGS_BUG","S","Target","args","newTarget","arguments","length","$args","apply","proto","prototype","instance","Object","result","Function","call","useMDXComponents","mdx","useMDXScope","scope","components","children","mdxComponents","mdxScope","End","fullScope","keys","values","fn"],"mappings":"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","file":"component---src-pages-blog-tsx-30ff9685f8d21215307a.js","sourcesContent":["import React from 'react';\r\n\r\nimport Layout from '../components/Layout';\r\nimport SEO from '../components/SEO';\r\nimport { StaticQuery, graphql, Link } from 'gatsby';\r\nimport Utils from '../classes/Utils';\r\nimport BlogPost, { BlogPostData } from '../components/BlogPost';\r\n\r\nconst BlogPage = ({ data }) => {\r\n  console.log(data);\r\n  const postCount = data.allMdx.totalCount;\r\n  const posts: BlogPostData[] = data.allMdx.edges.map(edge => edge.node);\r\n  const months: string[] = [];\r\n\r\n  const postsReact: any[] = [];\r\n  let last;\r\n\r\n  for (const post of posts) {\r\n    const date = post.frontmatter.date;\r\n    let id;\r\n    if (date !== last) {\r\n      last = date;\r\n      id = `post-month-${Utils.makeStrKey(date)}`;\r\n      months.push(date);\r\n    }\r\n    postsReact.push(<BlogPost node={post} key={post.id} id={id} isExcerpt={true} />);\r\n  }\r\n\r\n  return (\r\n    <Layout className=\"page page-blog\">\r\n      <SEO title=\"Blog\"/>\r\n\r\n\r\n      <div className=\"blog-grid\">\r\n        <div className=\"blog-posts\">\r\n          <h4>{`${postCount} ${postCount == 1 ? 'post' : 'posts'}`}</h4>\r\n          {postsReact}\r\n        </div>\r\n\r\n        <nav className=\"blog-nav\">\r\n          <h4>Archive</h4>\r\n          <ol>\r\n            {months.map(month => (\r\n              <li key={month}>\r\n                <a href={`#post-month-${Utils.makeStrKey(month)}`}>\r\n                  <i className={'fas fa-archive'} />{month}\r\n                </a>\r\n              </li>\r\n            ))}\r\n          </ol>\r\n        </nav>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMdx(\r\n        sort: { fields: [frontmatter___date], order: DESC },\r\n        filter: {fileAbsolutePath: { regex: \"/posts/\"}}) {\r\n      totalCount\r\n      edges {\r\n          node {\r\n              ...blogPostFields\r\n          }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default BlogPage;\r\n","/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","import React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport Utils from '../classes/Utils';\r\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\r\n\r\nexport interface BlogPostData {\r\n    id: string;\r\n    excerpt: string;\r\n    body: string;\r\n    frontmatter: {\r\n        path: string;\r\n        title: string;\r\n        date: string;\r\n    };\r\n}\r\n\r\ninterface BlogPostProps {\r\n    id: string;\r\n    node: BlogPostData;\r\n    isExcerpt: boolean;\r\n}\r\n\r\nexport default class BlogPost extends React.Component<BlogPostProps, {}> {\r\n  constructor(props: BlogPostProps) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { node, isExcerpt, id } = this.props;\r\n    return (\r\n      <article className=\"blog-post\" id={id}>\r\n        {isExcerpt && (\r\n          <Link to={Utils.getBlogLink(node.frontmatter.path)}>\r\n            <h3>{node.frontmatter.title}</h3>\r\n          </Link>\r\n        )}\r\n        {!isExcerpt && <h1>{node.frontmatter.title}</h1>}\r\n\r\n        <div className=\"post-date\">\r\n          <i className=\"far fa-calendar\"></i>\r\n          <span>{node.frontmatter.date}</span>\r\n        </div>\r\n\r\n        <div className={`post-body ${this.props.isExcerpt ? 'post-excerpt' : 'post-markdown'}`}>\r\n          {(this.props.isExcerpt && false) && <p>{node.excerpt}</p>}\r\n          <MDXRenderer>{node.body}</MDXRenderer>\r\n        </div>\r\n      </article>\r\n    );\r\n  }\r\n}","// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = require('./_export');\nvar create = require('./_object-create');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar bind = require('./_bind');\nvar rConstruct = (require('./_global').Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n"],"sourceRoot":""}